<?php
namespace Devel;
Use Cumula\BaseComponent as BaseComponent;
use Cumula\ComponentManager as ComponentManager;
/**
 * Cumula
 *
 * Cumula â€” framework for the cloud.
 *
 * @package    Cumula
 * @version    0.1.0
 * @author     Seabourne Consulting
 * @license    MIT License
 * @copyright  2011 Seabourne Consulting
 * @link       http://cumula.org
 */


/**
 * Devel Component
 *
 * Provides basic debugging info, including an event trace.
 *
 * @package		Cumula
 * @subpackage	Devel
 * @author     Seabourne Consulting
 */
class Devel extends BaseComponent {
	protected $_benchmarks;
	protected $_logEventStack;
	
	/**
	 * Constructor.
	 * 
	 * @return unknown_type
	 */
	public function __construct() {
		$this->addEventListenerTo('Cumula\\EventDispatcher', 'event_registered', 'registerPreAndPost');
		parent::__construct();
		
		//Initialize the benchmarks container to an empty array.
		$this->_benchmarks = array();
		
		//Add  listener to app BOOT_INIT event
		$this->addEventListenerTo('Application', 'boot_init', 'startAppTimer');
		$this->_logEventStack = '';
	}
	
	
	/**
	 * Starts the application response timer, used as an event callback
	 * 
	 * @param $event
	 * @param $request
	 * @param $response
	 * @return unknown_type
	 */
	public function startAppTimer($event, $dispatcher, $request, $response) {
		$this->addEventListenerTo('Application', 'eventdispatcher_event_dispatched', 'logEventDispatch');
		$this->addEventListenerTo('Response', 'eventdispatcher_event_dispatched', 'logEventDispatch');
		
		$this->addBenchmark('app_boot');
		$this->addEventListenerTo('Response', 'response_prepare', 'stopAppTimer');
	}
	
	/**
	 * Event listener to stop the app timer
	 * 
	 * @param $event
	 * @param $response
	 * @return unknown_type
	 */
	public function stopAppTimer($event, $response) {
		$this->addBenchmark('app_shutdown');
		$time = $this->compareBenchmarks('app_boot', 'app_shutdown');
		if($this->config->getConfigValue('show_render', true)) {
			$response->response['content'] .= '<div>Rendering the page took '.(number_format($time, 4)*1000).' ms</div>';
			$response->response['content'] .= '<div>Rendering the page used '.(memory_get_usage()/1000).' KB of memory</div>'; 
			$response->response['content'] .= '<div>Rendering the page used a maximum '.(memory_get_peak_usage()/1000).' KB of memory</div>';
			$comps = ComponentManager::instance()->getEnabledComponents();
			$response->response['content'] .= '<div>Rendering the page used '.count($comps).' components</div>';
			$response->response['content'] .= '<div>Call Stack</div><pre>'.$this->_logEventStack.'</pre>';
		}
	}
	
	/* (non-PHPdoc)
	 * @see core/abstracts/BaseComponent#install()
	 */
	public function install() {
		$cm = ComponentManager::instance();
		$cm->registerStartupComponent($this);
	}
	
	/* (non-PHPdoc)
	 * @see core/abstracts/BaseComponent#startup()
	 */
	public function startup() 
	{
		$components = ComponentManager::instance()->getEnabledComponents();
		foreach($components as $component) 
		{
			if($component != get_class($this))
			{
				$this->addEventListenerTo($component, 'eventdispatcher_event_dispatched', 'logEventDispatch');
			}
		}
		$this->addEventListenerTo('Cumula\\ComponentManager', 'eventdispatcher_event_dispatched', 'logEventDispatch'); 
		$this->addEventListenerTo('Cumula\\SystemConfig', 'eventdispatcher_event_dispatched', 'logEventDispatch');
	}
	
	/**
	 * Event listener
	 * 
	 * @param $event
	 * @param $event_dispatched
	 * @param $instance
	 * @param $handler
	 * @return unknown_type
	 */
	public function logEventDispatch($event, $caller, $event_dispatched, $instance, $handler = FALSE) 
	{
		global $level;
		$classInstance = get_class($instance);
		$handlerClass = FALSE;

		if(is_array($handler) && isset($handler[1]) && $handler[1] == 'logEventDispatch') {
			return false;
		}

		// Default Message
		$string = sprintf('%s dispatched by %s', $event_dispatched, $classInstance);

		// Get the class of the handler if available
		if (is_object($handler))
		{
			$handlerClass = get_class($handler);
		}
		elseif (is_array($handler) && isset($handler[0]) && is_object($handler[0]))
		{
			$handlerClass = get_class($handler[0]);
		}

		// If the $handler and $handlerClass have been changed, build the message
		if ($handler !== FALSE && $handlerClass !== FALSE)
		{
			if(is_array($handler))
			{
				$handlerClass .= '::'. $handler[1];
			}
			$string = sprintf('%s dispatched by %s to %s', $event_dispatched, $classInstance, $handlerClass);
		}

		$this->_logInfo("Level $level: ".$string);	
		$spacing = str_repeat('&nbsp;&nbsp;&nbsp;', $level - 1);
		$this->_logEventStack .= $spacing.$string."\n";
	}

	/**
	 * Register a before and after event listener
	 * @param void
	 * @return void
	 **/
	public function registerPreAndPost($event, $dispatcher, $registeredClass, $registeredEvent) 
	{
		$notAllowed = array(
			$event,
			'eventdispatcher_event_dispatched',
			'before_',
			'after_',
		);
		$allowRegistration = TRUE;
		foreach ($notAllowed as $string) {
			if (stripos($registeredEvent, $string) !== FALSE)
			{
				$allowRegistration = FALSE;
			}
		}
		// Don't register a before and after listener for event_registered or event_dispatcher_event_dispatched
		if ($allowRegistration && $registeredClass !== __CLASS__)
		{
			$beforeEvent = sprintf('before_%s', $registeredEvent);
			$afterEvent = sprintf('after_%s', $registeredEvent);
			$this->addEventListenerTo($registeredClass, $beforeEvent, 'logEventDispatch');
			$this->addEventListenerTo($registeredClass, $afterEvent, 'logEventDispatch');
		}
	} // end function registerPreAndPost
	
	/**
	 * Adds a new benchmark time
	 * 
	 * @param $benchmarkName
	 * @return unknown_type
	 */
	public function addBenchmark($benchmarkName) {
		$this->_benchmarks[$benchmarkName] = microtime(true);
	}
	
	/**
	 * Compares two benchmark times
	 * 
	 * @param $benchmarkName1
	 * @param $benchmarkName2
	 * @return unknown_type
	 */
	public function compareBenchmarks($benchmarkName1, $benchmarkName2) {
		if(array_key_exists($benchmarkName2, $this->_benchmarks) && array_key_exists($benchmarkName1, $this->_benchmarks))
			return ($this->_benchmarks[$benchmarkName2]-$this->_benchmarks[$benchmarkName1]);
		else
			return false;
	}

  /**
   * Implementnation of the getInfo method
   * @param void
   * @return array
   **/
  public static function getInfo() {
    return array(
      'name' => 'Development Helper',
      'description' => 'Output Development information for each event trigger',
      'version' => '0.1.0',
      'dependencies' => array(),
    );
  } // end function getInfo
}

function jslog($obj) {
	$ref = new ReflectionClass(get_class($obj));
	$props = $obj->getInstanceVars();
	$json = "{'\$this(".$ref->getName().")':".json_encode($props, JSON_HEX_TAG|JSON_HEX_APOS|JSON_HEX_QUOT|JSON_HEX_AMP)."}";
	return "<script type='text/javascript'>console.log(".$json.");</script>";
}
